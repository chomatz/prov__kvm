---

- name: ensure tasks run only on selected os releases
  block:

    - name: install and configure a kvm hypervisor
      block:

        - name: provision kvm hypervisor
          ansible.builtin.debug:
            msg: |
              ----------------------------------------
              installs virtualization related packages
              ----------------------------------------
            verbosity: 0
          delegate_to: localhost
          run_once: true

        - name: install virtualization packages
          ansible.builtin.package:
            name: "{{ kvm.packages }}"
            state: latest

    - name: configure nested virtualization
      block:

        - name: enable nested virtualization
          ansible.builtin.debug:
            msg: |
              ---------------------------------------------------------
              enables nested virtualization on either AMD or Intel cpus
              ---------------------------------------------------------
            verbosity: 0
          delegate_to: localhost
          run_once: true

        - name: enable AMD nested virtualization
          ansible.builtin.lineinfile:
            path: /etc/modprobe.d/kvm.conf
            regexp: '^.*options kvm_amd nested'
            line: options kvm_amd nested=1
            create: true
            owner: root
            group: root
            mode: "0644"
          when: ansible_processor.1 == "AuthenticAMD"

        - name: enable Intel nested virtualization
          ansible.builtin.lineinfile:
            path: /etc/modprobe.d/kvm.conf
            regexp: '^.*options kvm_intel nested'
            line: options kvm_intel nested=1
            create: true
            owner: root
            group: root
            mode: "0644"
          when: ansible_processor.1 == "GenuineIntel"

    - name: virtualization optimizations
      block:

        - name: enable virtualization optimizations
          ansible.builtin.debug:
            msg: |
              ------------------------------------------------------
              configure vendor specific virtualization optimizations
              ------------------------------------------------------
            verbosity: 0
          delegate_to: localhost
          run_once: true

        - name: add kernel virtualization arguments
          ansible.builtin.command:
            cmd: "grubby --args='{{ item.key }}={{ item.value }}' --update-kernel=ALL"
          with_items: "{{ kernel.arguments.amd }}"
          register: kernel_amd
          failed_when:
            - kernel_amd is failed
            - "'No such file or directory' not in kernel_amd.msg"
          when: ansible_processor.1 == "AuthenticAMD"

        - name: add kernel virtualization arguments
          ansible.builtin.command:
            cmd: "grubby --args='{{ item.key }}={{ item.value }}' --update-kernel=ALL"
          with_items: "{{ kernel.arguments.intel }}"
          register: kernel_intel
          failed_when:
            - kernel_intel is failed
            - "'No such file or directory' not in kernel_intel.msg"
          when: ansible_processor.1 == "GenuineIntel"

    - name: service management
      block:

        - name: enable the virtualization service
          ansible.builtin.debug:
            msg: |
              ---------------------------------------------------
              configure the libvirtd service to run automatically
              ---------------------------------------------------
            verbosity: 0
          delegate_to: localhost
          run_once: true

        - name: enable and start the libvirt service
          ansible.builtin.service:
            name: libvirtd
            state: started
            enabled: true

    - name: enable network bridge
      block:

        - name: enable ip forwarding
          ansible.builtin.blockinfile:
            path: /etc/sysctl.d/ip_forward.conf
            block: |
              net.ipv4.ip_forwarding=1
              net.ipv6.conf.all.forwarding=1
            create: true
            owner: root
            group: root
            mode: "0644"

        - name: display ipv4 information
          ansible.builtin.debug:
            var: ansible_default_ipv4
            verbosity: 1

        - name: display ipv6 information
          ansible.builtin.debug:
            var: ansible_default_ipv6
            verbosity: 1

        - name: "determine whether {{ ansible_default_ipv4.interface }} uses dhcp"
          ansible.builtin.shell:
            cmd: "nmcli connection show {{ ansible_default_ipv4.alias }} | grep ipv4.method | sed -e 's/ //g' | cut -d ':' -f 2"
          changed_when: false
          register: ipv4_method

        - name: display ipv4 alias
          ansible.builtin.debug:
            var: ansible_default_ipv4.alias
            verbosity: 1

        - name: display ipv4 method
          ansible.builtin.debug:
            var: ipv4_method.stdout
            verbosity: 1

        - name: auto ivp4 configuration
          block:

            - name: "create {{ ipv4_method.stdout }} bridge interface - {{ kvm.bridge }}"
              community.general.nmcli:
                conn_name: "{{ kvm.bridge }}"
                ifname: "{{ kvm.bridge }}"
                type: bridge
                method4: "{{ ipv4_method.stdout }}"
                autoconnect: true
                state: present
              register: bridge_result

            - name: display bridge creation status
              ansible.builtin.debug:
                var: bridge_result
                verbosity: 0

          when: ipv4_method.stdout == "auto"

        - name: manual ipv4 configuration
          block:

            - name: determine dns servers
              ansible.builtin.shell:
                cmd: "nmcli connection show {{ ansible_default_ipv4.alias }} | grep -i ip4.dns | sed -e 's/ //g' | cut -d ':' -f 2 "
              register: ipv4_dns

            - name: "create {{ ipv4_method.stdout }} bridge interface - {{ kvm.bridge }}"
              community.general.nmcli:
                conn_name: "{{ kvm.bridge }}"
                ifname: "{{ kvm.bridge }}"
                type: bridge
                method4: "{{ ipv4_method.stdout }}"
                ip4: "{{ ansible_default_ipv4.address }}/{{ ansible_default_ipv4.prefix }}"
                gw4: "{{ ansible_default_ipv4.gateway }}"
                dns4: "{{ ipv4_dns.stdout_lines }}"
                autoconnect: true
                state: present
              register: bridge_result

            - name: display bridge creation status
              ansible.builtin.debug:
                var: bridge_result
                verbosity: 0

          when: ipv4_method.stdout == "manual"

        - name: "create slave interface - {{ kvm.bridge }}-slave-{{ ansible_default_ipv4.interface }}"
          community.general.nmcli:
            conn_name: "{{ kvm.bridge }}-slave-{{ ansible_default_ipv4.interface }}"
            ifname: "{{ ansible_default_ipv4.interface }}"
            type: ethernet
            master: "{{ kvm.bridge }}"
            slave_type: bridge
            autoconnect: true
            state: present

        - name: start bridge interfaces
          ansible.builtin.shell:
            cmd: "nmcli connection up {{ kvm.bridge }}; nmcli connection up {{ kvm.bridge }}-slave-{{ ansible_default_ipv4.interface }}"

      rescue:

        - name: remove created interfaces
          community.general.nmcli:
            conn_name: "{{ item }}"
            state: absent
          with_items:
            - "{{ kvm.bridge }}"
            - "{{ kvm.bridge }}-slave-{{ ansible_default_ipv4.interface }}"

      when:
        - enable_network_bridge
        - ansible_default_ipv4.alias != kvm.bridge

  when: >
    ansible_distribution == "CentOS" or
    ansible_distribution == "Fedora" or
    ansible_distribution == "RedHat" or
    ansible_distribution == "Rocky"

...
