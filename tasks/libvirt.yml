---

- name: ensure tasks run only on selected os releases
  block:

    - name: provision kvm hypervisor
      ansible.builtin.debug:
        msg: |
          ---------------------------------------
          install virtualization related packages
          ---------------------------------------
        verbosity: 0
      delegate_to: localhost
      run_once: true

    - name: install virtualization packages
      ansible.builtin.package:
        name: "{{ kvm.packages }}"
        state: latest

    - name: enable nested virtualization
      ansible.builtin.debug:
        msg: |
          ------------------------------------
          enable nested virtualization support
          ------------------------------------
        verbosity: 0
      delegate_to: localhost
      run_once: true

    - name: enable AMD nested virtualization
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/kvm.conf
        regexp: '^.*options kvm_amd nested'
        line: options kvm_amd nested=1
        create: true
        owner: root
        group: root
        mode: "0644"
      when: ansible_processor.1 == "AuthenticAMD"

    - name: enable Intel nested virtualization
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/kvm.conf
        regexp: '^.*options kvm_intel nested'
        line: options kvm_intel nested=1
        create: true
        owner: root
        group: root
        mode: "0644"
      when: ansible_processor.1 == "GenuineIntel"

    - name: enable virtualization optimizations
      ansible.builtin.debug:
        msg: |
          ------------------------------------------------------
          configure vendor specific virtualization optimizations
          ------------------------------------------------------
        verbosity: 0
      delegate_to: localhost
      run_once: true

    - name: add kernel virtualization arguments
      ansible.builtin.command:
        cmd: "grubby --args='{{ item.key }}={{ item.value }}' --update-kernel=ALL"
      with_items: "{{ kernel.arguments.amd }}"
      register: kernel_amd
      failed_when:
        - kernel_amd is failed
        - "'No such file or directory' not in kernel_amd.msg"
      when: ansible_processor.1 == "AuthenticAMD"

    - name: add kernel virtualization arguments
      ansible.builtin.command:
        cmd: "grubby --args='{{ item.key }}={{ item.value }}' --update-kernel=ALL"
      with_items: "{{ kernel.arguments.intel }}"
      register: kernel_intel
      failed_when:
        - kernel_intel is failed
        - "'No such file or directory' not in kernel_intel.msg"
      when: ansible_processor.1 == "GenuineIntel"

    - name: enable the virtualization service
      ansible.builtin.debug:
        msg: |
          ---------------------------------------------------
          configure the libvirtd service to run automatically
          ---------------------------------------------------
        verbosity: 0
      delegate_to: localhost
      run_once: true

    - name: enable and start the libvirt service
      ansible.builtin.service:
        name: libvirtd
        state: started
        enabled: true

  when: >
    ansible_distribution == "CentOS" or
    ansible_distribution == "Fedora" or
    ansible_distribution == "RedHat" or
    ansible_distribution == "Rocky"

...
