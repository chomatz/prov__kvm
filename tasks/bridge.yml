---

- name: ensure tasks run only on selected os releases
  block:

    - name: configure default network bridge
      block:

        - name: ip v4/6 forwarding
          ansible.builtin.debug:
            msg: |
              --------------------------------------
              configure forwarding for ipv4 and ipv6
              --------------------------------------
            verbosity: 0
          delegate_to: localhost
          run_once: true

        - name: enable ip forwarding
          ansible.posix.sysctl:
            name: "{{ item }}"
            value: 1
            state: present
            sysctl_set: true
            sysctl_file: /etc/sysctl.d/ip_forward.conf
          with_items:
            - net.ipv4.ip_forward
            - net.ipv6.conf.all.forwarding

        - name: ipv4 information
          ansible.builtin.debug:
            msg: |
              ------------------------------------------------
              gather information on the default ipv4 interface
              ------------------------------------------------
            verbosity: 0
          delegate_to: localhost
          run_once: true

        - name: display ipv4 information
          ansible.builtin.debug:
            var: ansible_default_ipv4
            verbosity: 1

        - name: display ipv6 information
          ansible.builtin.debug:
            var: ansible_default_ipv6
            verbosity: 1

        - name: "determine whether {{ ansible_default_ipv4.interface }} uses dhcp"
          ansible.builtin.shell:
            cmd: "nmcli connection show {{ ansible_default_ipv4.alias }} | grep ipv4.method | sed -e 's/ //g' | cut -d ':' -f 2"
          changed_when: false
          register: ipv4_method

        - name: display ipv4 alias
          ansible.builtin.debug:
            var: ansible_default_ipv4.alias
            verbosity: 1

        - name: display ipv4 method
          ansible.builtin.debug:
            var: ipv4_method.stdout
            verbosity: 1

        - name: bridge configuration
          ansible.builtin.debug:
            msg: |
              ------------------------------
              configure the bridge interface
              ------------------------------
            verbosity: 0
          delegate_to: localhost
          run_once: true

        - name: auto ivp4 configuration
          block:

            - name: "create {{ ipv4_method.stdout }} bridge interface - {{ kvm.bridge }}"
              community.general.nmcli:
                conn_name: "{{ kvm.bridge }}"
                ifname: "{{ kvm.bridge }}"
                type: bridge
                method4: "{{ ipv4_method.stdout }}"
                autoconnect: true
                state: present
              register: bridge_result

            - name: display bridge creation status
              ansible.builtin.debug:
                var: bridge_result
                verbosity: 1

          when: ipv4_method.stdout == "auto"

        - name: manual ipv4 configuration
          block:

            - name: determine dns servers
              ansible.builtin.shell:
                cmd: "nmcli connection show {{ ansible_default_ipv4.alias }} | grep -i ip4.dns | sed -e 's/ //g' | cut -d ':' -f 2 "
              register: ipv4_dns

            - name: "create {{ ipv4_method.stdout }} bridge interface - {{ kvm.bridge }}"
              community.general.nmcli:
                conn_name: "{{ kvm.bridge }}"
                ifname: "{{ kvm.bridge }}"
                type: bridge
                method4: "{{ ipv4_method.stdout }}"
                ip4: "{{ ansible_default_ipv4.address }}/{{ ansible_default_ipv4.prefix }}"
                gw4: "{{ ansible_default_ipv4.gateway }}"
                dns4: "{{ ipv4_dns.stdout_lines }}"
                autoconnect: true
                state: present
              register: bridge_result

            - name: display bridge creation status
              ansible.builtin.debug:
                var: bridge_result
                verbosity: 0

          when: ipv4_method.stdout == "manual"

        - name: slave configuration
          ansible.builtin.debug:
            msg: |
              -----------------------------
              configure the slave interface
              -----------------------------
            verbosity: 0
          delegate_to: localhost
          run_once: true

        - name: "create slave interface - {{ kvm.bridge }}-slave-{{ ansible_default_ipv4.interface }}"
          community.general.nmcli:
            conn_name: "{{ kvm.bridge }}-slave-{{ ansible_default_ipv4.interface }}"
            ifname: "{{ ansible_default_ipv4.interface }}"
            type: ethernet
            master: "{{ kvm.bridge }}"
            slave_type: bridge
            autoconnect: true
            state: present

        - name: start bridge interfaces
          ansible.builtin.shell:
            cmd: "nmcli connection up {{ kvm.bridge }}; nmcli connection up {{ kvm.bridge }}-slave-{{ ansible_default_ipv4.interface }}"

      rescue:

        - name: bridge configuration rollback
          ansible.builtin.debug:
            msg: |
              -----------------------------------
              remove the faulty bridge interfaces
              -----------------------------------
            verbosity: 0
          delegate_to: localhost
          run_once: true

        - name: remove created interfaces
          community.general.nmcli:
            conn_name: "{{ item }}"
            state: absent
          with_items:
            - "{{ kvm.bridge }}"
            - "{{ kvm.bridge }}-slave-{{ ansible_default_ipv4.interface }}"

      when:
        - enable_network_bridge
        - ansible_default_ipv4.alias != kvm.bridge

  when: >
    ansible_distribution == "CentOS" or
    ansible_distribution == "Fedora" or
    ansible_distribution == "RedHat" or
    ansible_distribution == "Rocky"

...
